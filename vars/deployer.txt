# Installation d'un Bundle proven sur un environnement spécifique

## Environnement pipeline
+ env.provenUser : pré-requis de la librairie utility-dsl
+ env.provenPassword : pré-requis de la librairie utility-dsl

## Tools
+ jdk
+ maven

## Signature de la fonction "deployer"
La fonction deployer prend en paramètre **le bundle** à livrer et **l'environnement** sur lequel il doit être livré.
L'environnement est un objet JSON structuré comme suit :
```
{
    "
	{
      "matrix": "fr.pe.echd.service.ds013:ds013-pfe-transformations-appro:cadre-x"
    }
```

# Usage de la fonction "deployer"
En admettant que la configuration des environnements soit persistée dans un fichier _ic/environnements.json_ (où **ic** est le répertoire depuis le répertoire parent), la lecture du fichier se fera comme suit :

``` 
    try {
		environnements = json.parseFromText(readFile("ic/environnements.json"))
	} catch (exception) {
		echo "Une erreur est survenue à la lecture du fichier ic/environnements.json !" + exception.getMessage()
	}
```

La fonction déployer prend en charge le déploiement de multiples bundles

L'appel de la fonction sera donc aussi simple que :
```
    deployer {
        bundles = [releaseBundle]
        matrice = configuration.environnements[cadre].matrix
        notifications = [deploiementNotif]
   }
```

Pour surcharger le type d'enveloppe à déployer, il suffit de rajouter dans le dictionnaire du bundle, 
la variable "ic.deploy.type"

Exemple d'instance de notification par défaut :
```
import fr.pe.jenkins.plugins.notification.*
import fr.pe.jenkins.plugins.notification.html.*

Notification deploiementNotif = DeploiementHtml.to("mail.projet1@pole-emploi.intra, mail.projet2@pole-emploi.intra", "mail.st@pole-emploi.intra")
    deploiementNotif.appendData(NotificationDataKeys.PROJECT_NAME.key, "Mon projet")
    deploiementNotif.appendData(NotificationDataKeys.CADRE.key, "TIC")
    deploiementNotif.appendData(NotificationDataKeys.MATRICE.key, "mon-groupId:mon-artifactId:1.0.0")
```